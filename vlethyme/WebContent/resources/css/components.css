/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*******************
 ** MISCELLANEOUS **
 *******************/

/**
 * Style that can be used for links if we just want them to have the same color as the
 * text. These links will be underlined when hovering over them.
 *   e.g. <a href="http://www.google.co.uk" class="vle-plain-link">Google</a>
 */
a.vle-plain-link:hover {
    text-decoration: underline;
}


/******************
 * ACCESSIBILITY **
 ******************/

/**
 * Used for accessibility purposes as it allows to put text content
 * for items that might not have text content (e.g. icons) or create
 * additional clues for screenreader users
 *   e.g. <button class="vle-icon vle-icon-home"><span class="vle-aural-text">Additional information</span></button>
 */
.vle-aural-text {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/**
 * Style that can be used to fake focus on an element. This can for example
 * be used when a hidden element needs to provide visual feedback on a different element.
 */
.vle-focus {
    outline: thin dotted #333;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}


/***************
 ** THREEDOTS **
 **************/

/**
 * Style that can be applied to text elements to make sure that the text in a text element
 * doesn't use more than the space it has available. If the text is shorter than the
 * available space, this will leave the text unchanged. If the text is longer than the available
 * space, it will be cut off at its maximum length and will be appended with `...`. In order for
 * this to work, the text element will need to have a maximum width set.
 *    e.g. <span class="vle-threedots">Some very very long text</span>
 */

.vle-threedots {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


/************
 ** PANELS **
 ************/

/**
 * Panels that can be used to show HTML content on top of a background
 * color or background image. Three different panels can be used
 *  - `vle-panel-primary`: Panel that contains content that should really stand out
 *  - `vle-panel-secondary`: Panel that contains the secondary content
 *  - `vle-panel-tertiary`: Other panel content (e.g. search box on the landing page)
 *   e.g. <div class="vle-panel-primary">...</div>
 */
.vle-panel-primary, .vle-panel-secondary, .vle-panel-tertiary {
    padding: 15px;
    -webkit-border-radius: 5px;
       -moz-border-radius: 5px;
            border-radius: 5px;
}

/**********************
 ** VISIBILITY ICONS **
 **********************/

/**
 * These icons are used consistently to indicate the visibility setting for an entity
 * in the system. The available visibility privacy options are `private`, `loggedin` and
 * `public`.
 *   e.g. <i class="icon-vle-private"><span class="vle-aural-text">__MSG__PRIVATE__</span></i>
 *        <i class="icon-vle-loggedin"><span class="vle-aural-text">__MSG__LOGGED_IN__</span></i>
 *        <i class="icon-vle-public"><span class="vle-aural-text">__MSG__PUBLIC__</span></i>
 *
 * Large icons can be rendered by adding the `large` class to the icon.
 *   e.g. <i class="icon-vle-private large"><span class="vle-aural-text">__MSG__PRIVATE__</span></i>
 *        <i class="icon-vle-loggedin large"><span class="vle-aural-text">__MSG__LOGGED_IN__</span></i>
 *        <i class="icon-vle-public large"><span class="vle-aural-text">__MSG__PUBLIC__</span></i>
 *
 * Note:
 *
 * - The `vle-aural-text` span is added in for accessibility purposes, but can be left out when necessary.
 */

i.icon-vle-private,
i.icon-vle-loggedin,
i.icon-vle-public {
    font-size: 18px;
    width: 18px;
    height: 18px;
}

i.icon-vle-private:before,
i.icon-vle-loggedin:before,
i.icon-vle-public:before {
    -webkit-border-radius: 500px;
       -moz-border-radius: 500px;
            border-radius: 500px;
    color: #313131;
    display: inline-block;
    font-size: 15px;
    width: 18px;
    height: 16px;
    padding-top: 1px;
    text-align: center;
}

i.icon-vle-private:before {
    background-color: #FFBC78;
    content: "\f023";
}

i.icon-vle-loggedin:before {
    background-color: #C4E6FF;
    content: "\f041";
}

i.icon-vle-public:before {
    background-color: #A6E0AB;
    content: "\f0ac";
}

/* Large visibility icons */

i[class^="icon-"].large {
    width: 60px;
    height: 60px;
}

i[class^="icon-"].large:before {
    font-size: 50px;
    height: 55px;
    padding-top: 5px;
    width: 60px;
}


/*******************
 ** LARGE OPTIONS **
 *******************/

/**
 * Generate a group of large toggle buttons.
 *
 * Each toggle button will have an icon, a name and a description. One of the toggle buttons will
 * selected at any time.
 *
 * TODO: This component needs to be more generic so the tick is always displayed in the middle, independent
 * of the width of the large option. https://github.com/oaeproject/3akai-ux/issues/2980
 *
 * e.g. <div class="vle-large-options-container row-fluid">
 *          <label for="vle-visibility-private" class="span4 text-center">
 *              <div class="vle-large-options well pull-left text-center checked">
 *                  <input type="radio" id="vle-visibility-private" value="private" name="vle-visibility-group" class="pull-left" checked="checked"/>
 *                  <i class="icon-vle-private large text-center"></i>
 *                  <span>__MSG__PRIVATE__</span>
 *              </div>
 *              <i class="icon-ok hide"></i>
 *              <small>__MSG__GROUP_PRIVATE_DESCRIPTION__</small>
 *          </label>
 *          <label for="vle-visibility-loggedin" class="span4 text-center">
 *              <div class="vle-large-options well pull-left text-center">
 *                  <input type="radio" id="vle-visibility-loggedin" value="loggedin" name="vle-visibility-group" class="pull-left"/>
 *                  <i class="icon-vle-loggedin large text-center"></i>
 *                  <span>Cambridge University</span>
 *              </div>
 *              <i class="icon-ok hide"></i>
 *              <small>__MSG__GROUP_LOGGEDIN_DESCRIPTION__</small>
 *          </label>
 *          <label for="vle-visibility-public" class="span4 text-center">
 *              <div class="vle-large-options well pull-left text-center">
 *                  <input type="radio" id="vle-visibility-public" value="public" name="vle-visibility-group" class="pull-left"/>
 *                  <i class="icon-vle-public large text-center"></i>
 *                  <span>__MSG__PUBLIC__</span>
 *              </div>
 *              <i class="icon-ok hide"></i>
 *              <small>__MSG__GROUP_PUBLIC_DESCRIPTION__</small>
 *          </label>
 *      </div>
 *
 * Notes:
 *
 * - The selected button should have a `checked` class on the `vle-large-options` element
 **/

.vle-large-options-container label {
    position: relative;
}

.vle-large-options-container .vle-large-options {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    height: 150px;
    margin: 0 10px 15px 0;
    padding-top: 13px;
    width: 100%;
}

.vle-large-options-container label:last-child .vle-large-options {
    margin-right: 0;
}

.vle-large-options-container .vle-large-options input {
    position: absolute;
    z-index: -1; /* Adding a z-index of -1 hides the element from the view but still allows for focus of the element */
}

.vle-large-options-container .vle-large-options i.icon-vle-private:before,
.vle-large-options-container .vle-large-options i.icon-vle-loggedin:before,
.vle-large-options-container .vle-large-options i.icon-vle-public:before {
    margin-top: 6px;
}

.vle-large-options-container .vle-large-options span {
    display: block;
    font-size: 13px;
    font-weight: bold;
    margin-top: 7px;
}

.vle-large-options-container .vle-large-options.checked {
    border: 8px solid;
    padding-top: 6px;
}

.vle-large-options-container .vle-large-options + i {
    display: none;
}

.vle-large-options-container .vle-large-options.checked + i {
    -webkit-border-radius: 100px;
       -moz-border-radius: 100px;
            border-radius: 100px;
    display: block;
    margin-left: 65px;
    position: absolute;
    top: 128px;
}

.vle-large-options-container .vle-large-options.checked + i:before {
    font-size: 24px;
    height: 30px;
    padding-top: 5px;
    width: 35px;
}


/************************
 ** SUCCESS/FAIL ICONS **
 ************************/

/* These icons are used in situations where checks for success/failure are done */


[class^="icon-"].icon-ok,
[class*=" icon-"].icon-ok,
[class^="icon-"].icon-ok:hover,
[class*=" icon-"].icon-ok:hover {
    color: #468847;
}

[class^="icon-"].icon-warning-sign,
[class*=" icon-"].icon-warning-sign,
[class^="icon-"].icon-warning-sign:hover,
[class*=" icon-"].icon-warning-sign:hover {
    color: #DD2222;
}

/****************
 ** THUMBNAILS **
 ****************/

/**
 * A thumbnail can be used to show a thumbnail picture/profile picture for an
 * entity. It will also attempt to set a default thumbnail in case no actual
 * image is available, and it allows for showing a visibility icon combined with
 * the thumbnail. These thumbnails will adjust in size to the space they have
 * been given by their container.
 *
 * In order to handle externally provided thumbnails that don't have equal
 * dimensions the image is set as the background on a div with appropriate aria
 * role info. The thumbnail displayed in these cases will be "cropped" from the
 * center of the provided image.
 *
 *   e.g. <div class="vle-thumbnail icon-vle-user">
 *            <a href="${entityData.profilePath}" title="${entityData.displayName|encodeForHTMLAttribute}">
 *                <div style="background-image: url(/ui/img/dummy/profile-pic-john.png)" role="img" aria-label="John Librarian"/>
 *                <i class="icon-vle-public"></i>
 *            </a>
 *        </div>
 *
 * Next to using the HTML structure, there is also a Trimpath macro that can be used
 * instead from all Trimpath templates:
 *
 *   `${renderThumbnail(entityData, [addVisibilityIcon], [large])}`
 *
 * - `entityData` is a standard object representing a user, group or content item or a search result for a user, group
 *    or content item as returned by Hilary. Alternatively, a string representing the resourceType or resourceSubType
 *    (i.e., 'user', 'group', 'content', 'file', 'link', 'collabdoc') can be passed in for an empty/anonymous
 *    entity thumbnail.
 * - `addVisibilityIcon` (optional) will determine whether or not the visibility icon should be shown. By default,
 *    the visibility icon will be shown. However, users will not never show a visibility icon.
 * - `large` (optional) determines whether or not a large default thumbnail icon should used. By default, a small icon will be used.
 *
 * Notes:
 *
 * - The actual thumbnail image is optional, and if no image is specified the
 *   thumbnail will show a default entity thumbnail. In order to do this,
 *   `icon-vle-user` should be added to the `vle-thumbnail` div for users,
 *   `icon-vle-group` should be added to the `vle-thumbnail` div for groups,
 *   `icon-vle-discussion` should be added to the `vle-thumbnail` div for discussions,
 *   `icon-vle-content` should be added to the `vle-thumbnail` div for generic content,
 *   `icon-vle-file` should be added to the `vle-thumbnail` div for uploaded files,
 *   `icon-vle-link` should be added to the `vle-thumbnail` div for links and
 *   `icon-vle-collabdoc` should be added to the `vle-thumbnail` div for collaborative documents.
 *   Even when an image is provided, the entity icon class can still be added as
 *   it will be used when the image cannot be downloaded.
 * - For large thumbnails (> 100px width/height), the `vle-thumbnail-large` class
 *   should be added to the `vle-thumbnail` container. It will cause the default
 *   thumbnail to be larger.
 * - An optional visibility icon can be added to the thumbnail as well and will
 *   automatically be positioned correctly. The available visibility icons are
 *   `icon-vle-private`, `icon-vle-loggedin` and `icon-vle-public` (See Visibility
 *   icons section).
 * - The link inside of the thumbnail can be used to link to the entity's profile page.
 *   This link is optional and can be left out.
 */

div.vle-thumbnail {
    border: 1px solid;
    width: 100%;
    height: 100%;
    text-align: center;
    display: inline-block;
    position: relative;
    -webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
}

div.vle-thumbnail:before {
    display: inline-block;
    font-size: 20px;
    margin-top: -11px;
    padding-top: 50%;
}

div.vle-thumbnail a,
div.vle-thumbnail div {
    -webkit-border-radius: 3px;
       -moz-border-radius: 3px;
            border-radius: 3px;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}

/* IE9 and IE10 need a background color on the link to be able to click the entire icon */
div.vle-thumbnail a {
    background: rgba(0, 0, 0, 0.01);
}

div.vle-thumbnail div {
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

div.vle-thumbnail.vle-thumbnail-large:before {
    font-size: 50px;
    margin-top: -25px;
}

/* Default entity thumbnails */

div.vle-thumbnail.icon-vle-content:before, div.vle-thumbnail.icon-vle-file:before {
    content: "\f016";
}

div.vle-thumbnail.icon-vle-link:before {
    content: "\f0c1";
}

div.vle-thumbnail.icon-vle-collabdoc:before {
    content: "\f044";
}

div.vle-thumbnail.icon-vle-discussion:before {
    content: "\f086";
}

div.vle-thumbnail.icon-vle-group:before {
    content: "\f0c0";
}

div.vle-thumbnail.icon-vle-user:before {
    content: "\f007";
}

/* Visibility icon positioning */

div.vle-thumbnail i[class^="icon-"] {
    position: absolute;
    bottom: -8px;
    right: -8px;
}


/***********
 ** CLIPS **
***********/

/**
 * Clips are the elements that are used for page (entity) titles and page actions.
 * They are folded onto the top of a container, which is usually the main page content
 * container. Each clip can have a set of actions associated to it, which will automatically
 * show when opening the clip through the dropdown icon.
 *
 * The HTML structure required for creating a clip is the following:
 *
 *  <div class="vle-clip-container">
 *      <div class="vle-clip-container-left">
 *          <div class="vle-clip">
 *              <div class="vle-clip-fold">
 *                  <div class="vle-clip-fold-inner"></div>
 *                  <div class="vle-clip-fold-outer"></div>
 *              </div>
 *              <div class="vle-clip-content">
 *                  <button>
 *                      <div class="vle-thumbnail icon-vle-user">
 *                          <img src="/url/to/picture" alt="John Doe"/>
 *                          <i class="icon-vle-public"></i>
 *                      </div>
 *                      <div>
 *                          <div>
 *                              <h1 class="vle-threedots">John Doe</h1>
 *                              <i class="icon-caret-down"></i>
 *                              <small>Job Title</small>
 *                          </div>
 *                      </div>
 *                  </button>
 *                  <div>
 *                      <ul>
 *                          <li><button><i class="icon-user"></i>Action 1</button></li>
 *                          <li><button><i class="icon-envelope"></i>Action 2</button></li>
 *                          <li><button type="button"><i class="icon-wrench"></i>Action 3</button></li>
 *                      </ul>
 *                  </div>
 *              </div>
 *          </div>
 *      </div>
 *  </div>
 *
 * Notes:
 *
 * - A clip needs to be inside of an `vle-clip-container` div. Inside of this container, you can specify the
 *   clips that should go on the left by adding them to a `vle-clip-container-left` div. You can specify the
 *   clips that should go on the right by adding them to a `vle-clip-container-right div inside of this container.
 * - The fold on a clip can be on the left of the clip or on the right of the clip. By default, the
 *   fold will be on the right. When a fold on the left is required, an `vle-clip-flipped` class should
 *   be added to the .`vle-clip` element.
 * - Clips are available in two different skinnable styles. By default, the primary style will be used. If
 *   the secundary style is needed, this can be done by adding an 'vle-clip-secondary' class to the
 *   `.vle-clip` element.
 * - A thumbnail image can be added to the clip by adding an `vle-thumbnail` div as the first element of the
 *   main button. This can also show a default entity picture (in case no image is provided) as well as a
 *   visibility icon (See the `Thumbnail` section for details on how to create a thumbnail).
 *   The thumbnail image is optional and can be left out as well.
 * - An optional `vle-threedots` class can be added to the `h1` elements in case a maximum width needs to be
 *   enforced.
 * - The `icon-caret-down` element is optional. If it is not provided, the clip will be shown in view
 *   only mode. If it is provided, the clip will be toggleable and the action menu will be shown when clicked.
 * - The `small` tag is used to show some additional clip metadata and is optional.
 * - When a clip should not be clickable (e.g. in non-manager mode of a page), the `disabled` attribute
 *   should be added to the button. This will hide any caret icons and will make the clip unclickable.
 */

/* Clip container */

.vle-clip-container {
    position: relative;
    margin-bottom: 55px;
}

.vle-clip-container .vle-clip-container-left,
.vle-clip-container .vle-clip-container-right {
    position: absolute;
}

.vle-clip-container .vle-clip-container-right {
    margin-right: 55px;
    right: 0;
}

.vle-clip {
    float: left;
    margin: -16px 10px 10px;
    position: relative;
    z-index: 100;
}

/* Clip fold */

.vle-clip .vle-clip-fold {
    height: 6px;
    float: right;
    margin-right: -7px;
    position: relative;
    width: 7px;
    z-index: 10;
}

.vle-clip.vle-clip-flipped .vle-clip-fold {
    float: left;
    margin-left: -9px;
}

.vle-clip .vle-clip-fold .vle-clip-fold-inner {
    -webkit-border-radius: 50px 50px 0 0;
       -moz-border-radius: 50px 50px 0 0;
            border-radius: 50px 50px 0 0;
    float: left;
    height: 6px;
    margin-left: -1px;
    position: absolute;
    width: 9px;
    z-index: 1;
}
.vle-clip.vle-clip-flipped .vle-clip-fold .vle-clip-fold-inner {
    margin-left: 0;
}

.vle-clip .vle-clip-fold .vle-clip-fold-outer {
    float: right;
    height: 6px;
    margin-left: -5px;
    position: absolute;
    width: 7px;
    z-index: 0;
}
.vle-clip.vle-clip-flipped .vle-clip-fold .vle-clip-fold-outer {
    margin-left: 4px;
}

/* Clip content */

.vle-clip .vle-clip-content {
    -webkit-border-radius: 6px 0 6px 6px;
       -moz-border-radius: 6px 0 6px 6px;
            border-radius: 6px 0 6px 6px;
}

.vle-clip.vle-clip-flipped .vle-clip-content {
    -webkit-border-radius: 0 6px 6px;
       -moz-border-radius: 0 6px 6px;
            border-radius: 0 6px 6px;
}

.vle-clip .vle-clip-content > button {
    width: 100%;
}

.vle-clip .vle-clip-content > button,
.vle-clip .vle-clip-content ul li button {
    background: none;
    border: none;
    font-weight: 600;
    padding: 14px 20px 14px 14px;
    text-align: left;
}

.vle-clip .vle-clip-content > button:disabled {
    cursor: default;
}

.vle-clip .vle-clip-content > button > div {
    float: left;
}

.vle-clip .vle-clip-content > button > div:nth-child(2) > div {
    display: table-cell;
    height: 35px;
    vertical-align: middle;
}

.vle-clip .vle-clip-content > button div.vle-thumbnail {
    border: none;
    height: 35px;
    margin-right: 12px;
    width: 35px;
}

.vle-clip .vle-clip-content h1 {
    display: inline-block;
    font-size: 16px;
    line-height: 1.3;
    margin: 0;
    font-weight: 600;
    max-width: 300px;
    min-height: 21px;
    word-wrap: nowrap;
}

.vle-clip .vle-clip-content h1.vle-threedots {
    float: left;
}

.vle-clip .vle-clip-content > button i.icon-caret-down,
.vle-clip .vle-clip-content > button i.icon-caret-up {
    margin-left: 5px;
    line-height: 16px;
    position: relative;
    top: 2px;
}

.vle-clip .vle-clip-content > button h1.vle-threedots + i.icon-caret-down,
.vle-clip .vle-clip-content > button h1.vle-threedots + i.icon-caret-up {
    margin-left: 10px;
}

.vle-clip .vle-clip-content > button:disabled i.icon-caret-down,
.vle-clip .vle-clip-content > button:disabled i.icon-caret-up {
    display: none;
}

.vle-clip .vle-clip-content small {
    clear: both;
    display: block;
    font-size: 12px;
    line-height: 1;
    font-weight: normal;
    white-space: nowrap;
}

/* Clip actions */

.vle-clip .vle-clip-content > div > ul {
    list-style: none;
    margin: 0 10px;
    display: none;
}

.vle-clip .vle-clip-content > div > ul li {
    display: inline;
}

.vle-clip .vle-clip-content > div > ul li button {
    -webkit-border-radius: 6px;
       -moz-border-radius: 6px;
            border-radius: 6px;
    font-size: 11px;
    min-width: 70px;
    padding: 10px;
    margin-bottom: 10px;
    text-align: center;
}

.vle-clip .vle-clip-content > div > ul li button i {
    display: block;
    margin: 0 auto 3px;
}


/***********
 ** TILES **
 ***********/

/**
 * A tile is a combination of a preview image and some entity metadata in a
 * polaroid-like appearance. The preview image will take up the bulk of the
 * space, with a bar at the bottom overlapping with the image that can show
 * metadata. Tiles will adjust in size to the space they have been given by
 * their container.
 *
 * The following HTML structure should be used to create a tile:
 *
 *  <div class="vle-tile">
 *      <a href="/user/u:cambridge:PPTBPgxSdf" title="John Librarian">
 *          <div class="vle-thumbnail vle-thumbnail-large icon-vle-user">
 *              <img src="/ui/img/dummy/profile-pic-john.png" alt="John Librarian" />
 *          </div>
 *      </a>
 *      <div class="vle-tile-metadata">
 *          <i class="icon-vle-public pull-left"></i>
 *          <h3 class="vle-threedots">
 *              <a href="/user/u:cambridge:PPTBPgxSdf">John Librarian</a>
 *          </h3>
 *          <small class="vle-threedots">Professor</small>
 *      </div>
 *  </div>
 *
 * Notes:
 *
 * - The `vle-thumbnail` element, containing the preview image, is a standard
 *   `vle-thumbnail` element (See Thumbnail section for full overview).
 * - The `vle-threedots` class should be added to metadata elements if you want
 *   to make sure that `...` is shown when the metadata is longer than the available
 *   space in the tile.
 * - The actual content of the metadata div can be pretty much anything, although an
 *   h3 should be used for the tile title.
 * - The `small` element used to add some additional metadata is optional.
 * - The visibility icon can be used as defined in the Visibility icon section, and
 *   can be floated on the left or right.
 */

.vle-tile,
.vle-list.vle-list-grid > li.vle-list-actions {
    position: relative;
    overflow: hidden;
    -webkit-border-radius: 3px;
       -moz-border-radius: 3px;
            border-radius: 3px;
}

/* Default thumbnail picture positioning */

.vle-tile .vle-thumbnail,
.vle-tile .vle-thumbnail a,
.vle-tile .vle-thumbnail img {
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
}

.vle-tile .vle-thumbnail:before {
    margin-top: -30px;
}

.vle-tile .vle-thumbnail.vle-thumbnail-large:before {
    margin-top: -50px;
}

/* Tile metadata */

.vle-tile > .vle-tile-metadata {
    position: absolute;
    bottom: 0;
    right: 0;
    left: 0;
    padding: 7px;
}

.vle-tile h3,
.vle-tile h3 a {
    font-size: 14px;
    font-weight: 600;
    line-height: 1.4;
    margin: 0;
}

.vle-tile small {
    font-size: 12px;
    font-weight: normal;
    line-height: 1.5;
    opacity: 0.8;
    text-transform: uppercase;
}


/****************
 ** LIST ITEMS **
 ****************/

/*
 * A list item is a way of displaying an entity and is a combination of a preview image,
 * some entity metadata, a checkbox and actions that can be taken on the entity. A list
 * item can be used as part of a larger list, but can also be used outside of a list to
 * present a single entity. List items will adjust in size to the space they have been
 * given by their container.
 *
 * The following HTML structure should be used to create a list item:
 *
 *  <div class="vle-listitem vle-listitem-compact">
 *      <input type="checkbox" class="pull-left" id="vle-list-details-u:cambridge:PPTBPgxSdf" data-id="u:cambridge:PPTBPgxSdf" />
 *      <label class="vle-aural-text" for="vle-list-details-u:cambridge:PPTBPgxSdf">John Librarian</label>
 *      <div class="vle-thumbnail icon-vle-user pull-left">
 *          <img src="/ui/img/dummy/profile-pic-john.png" alt="John Librarian" />
 *          <i class="icon-vle-private"></i>
 *      </div>
 *      <div>
 *          <h3 class="vle-threedots"><a href="/user/u:cambridge:PPTBPgxSdf">John Librarian</a></h3>
 *          <small class="vle-threedots">Professor</small>
 *      </div>
 *      <div class="vle-listitem-actions">
 *          <button class="btn btn-link" title="Share"><i class="icon-share"></i></button>
 *      </div>
 *  </div>
 *
 * Notes:
 *
 * - A list item is available in an expanded size and a compact size. By default, the larger expanded
 *   view will be used. In order to use the smaller compact view, the class `vle-listitem-compact`
 *   should be added to the `vle-listitem` element.
 * - A checkbox can be added to the list item for management purposes. This checkbox should have an
 *   accompanying `vle-aural-text` label for accessibility purposes.
 * - An action bar can be added to the list item by adding an `vle-listitem-actions` div to the list
 *   item. This action bar can contain one or multiple action buttons.
 * - The `vle-thumbnail`, `vle-listitem-actions` and checkbox are all optional.
 * - The `small` element used to add some additional metadata is optional as well.
 * - The `vle-thumbnail` element, containing the preview image, is a standard
 *   `vle-thumbnail` element (See Thumbnail section for full overview).
 */

.vle-listitem {
    padding: 10px;
    margin-bottom: 10px;
    min-height: 50px;
    border: 1px solid;
    -webkit-border-radius: 3px;
       -moz-border-radius: 3px;
            border-radius: 3px;
}

.vle-listitem.vle-listitem-compact {
    min-height: 27px;
}

.vle-listitem input[type="checkbox"].pull-left {
    margin-right: 10px;
    margin-top: 20px;
}

.vle-listitem.vle-listitem-compact input[type="checkbox"].pull-left {
    margin-top: 6px;
}

/* List item thumbnail */

.vle-listitem .vle-thumbnail {
    float: left;
    height: 50px;
    width: 50px;
    margin-right: 15px;
}

.vle-listitem.vle-listitem-compact .vle-thumbnail {
    height: 25px;
    width: 25px;
}

/* List item metadata */

.vle-listitem > div:not(.vle-thumbnail) {
    display: table-cell;
    vertical-align: middle;
    height: 50px;
}

.vle-listitem.vle-listitem-compact > div:not(.vle-thumbnail) {
    height: 25px;
    width: auto;
}

.vle-listitem h3 {
    display: inline-block;
    font-size: 16px;
    font-weight: 500;
    line-height: 25px;
    margin: 0;
    max-width: 450px;
}

.vle-listitem small {
    line-height: 1;
    font-size: 11px;
    opacity: 0.8;
    text-transform: uppercase;
}

.vle-listitem.vle-listitem-compact small {
    display: inline-block;
    line-height: 25px;
    margin-left: 20px;
}

/* List item actions */

.vle-listitem .vle-listitem-actions {
    width: 100%;
    text-align: right;
}

.vle-listitem .vle-listitem-actions i {
    font-size: 18px;
}


/***********
 ** LISTS **
 ***********/

/**
 * Lists are used as the core component for multiple widgets (library, membership, participants,
 * search, etc.) and present a list of entities that can be viewed in 3 separate view modes (grid,
 * details and compact).
 *
 * The HTML for a list item has been abstracted into a globally available TrimPath template that
 * can be used when rendering list view items:
 *
 *   `${listItem(entityData, [metadata], [showCheckbox])}`
 *
 * - `entityData` is an object representing a user, group or content item or a search result for a user, group
 *    or content item
 * - `metadata` (optional) is a line of metadata information that should be displayed underneath the entity name
 * - `showCheckbox` (optional) will determine whether ot not the checkbox should be shown. By default, the checkbox will be shown to all logged in users
 *
 * The output from this macro represents a single list (li) item, and should be wrapped in a list container (ul)
 * element with an `vle-list` class. In order to show the grid view, an `vle-list-grid` class should be added to
 * the list, in order to show the details view, an `vle-list-details` class should be added to the list and in order
 * to show the compact view, an `vle-list-compact` class should be added to the list:
 *
 *  e.g. <ul class="vle-list vle-list-grid">
 *           <Generated list items>
 *       </ul>
 */

/* Core list styles */

ul.vle-list {
    margin: 0;
    padding: 0;
    clear: both;
}

ul.vle-list > li {
    list-style: none;
    -webkit-border-radius: 3px;
       -moz-border-radius: 3px;
            border-radius: 3px;
}

ul.vle-list:not(.vle-list-grid) > li > .vle-list-grid-item,
ul.vle-list:not(.vle-list-details) > li > .vle-list-details-item,
ul.vle-list:not(.vle-list-compact) > li > .vle-list-compact-item {
    display: none;
}

/* Grid view */

ul.vle-list.vle-list-grid > li {
    float: left;
    margin: 0 14px 24px 0;
}

ul.vle-list.vle-list-grid > li .vle-thumbnail,
ul.vle-list.vle-list-grid > li.vle-list-actions {
    height: 162px;
    width: 162px;
}

/* Details and compact view */

ul.vle-list > li .vle-list-details-item,
ul.vle-list > li .vle-list-compact-item  {
    display: table;
    width: 100%;
}

ul.vle-list > li .vle-listitem {
    margin-bottom: 0px;
    margin-top: 10px;
}

ul.vle-list > li:first-child .vle-listitem {
    margin-top: 0px;
}


/******************
 ** LIST OPTIONS **
 ******************/

/**
 * The list options can be shown at the top of a list, providing a title for the list, as well
 * as possibly a list search form, list actions, view mode switching, etc.
 *
 * Some example HTML for a list options view:
 *
 *  <div class="vle-list-options">
 *      <div>
 *          <button class="btn vle-list-options-toggle">
 *              <h2>__MSG__LIBRARY__ <i class="icon-caret-down"></i></h2>
 *          </button>
 *          <div class="pull-right">
 *              <form class="form-search" id="library_search_form">
 *                  <input type="text" class="search-query" placeholder="__MSG__NARROW_BY_KEYWORD__">
 *              </form>
 *          </div>
 *      </div>
 *      <div class="vle-list-options-actions hide">
 *          <input type="checkbox" id="library-selectall" class="vle-list-selectall" />
 *          <label for="library-selectall" class="vle-aural-text">__MSG__SELECT_ALL__</label>
 *          <button type="button" class="btn" disabled="disabled"><i class="icon-share pull-left"></i>__MSG__SHARE__</button>
 *          <button type="button" class="btn" disabled="disabled"><i class="icon-remove pull-left"></i>__MSG__DELETE__</button>
 *          <div class="btn-group pull-right">
 *              <button class="btn" data-type="vle-list-compact">
 *                  <i class="icon-list"></i>
 *                  <span class="vle-aural-text">__MSG__LIST_VIEW__</span>
 *              </button>
 *              <button class="btn" data-type="vle-list-details">
 *                  <i class="icon-th-list"></i>
 *                  <span class="vle-aural-text">__MSG__EXPANDED_LIST_VIEW__</span>
 *              </button>
 *              <button class="btn active" data-type="vle-list-grid">
 *                  <i class="icon-th-large"></i>
 *                  <span class="vle-aural-text">__MSG__GRID_VIEW__</span>
 *              </button>
 *          </div>
 *      </div>
 *  </div>
 *
 * Notes:
 *
 * - The `vle-list-options-toggle` item is used to show the title of the list, and will also be used to toggle
 *   the actions bar. This will be enabled automatically by the system. If a list needs to be shown in view-only
 *   mode, this element should be set to disabled, in which case the dropdown icon will disappear and the toggle
 *   will no longer work.
 * - The `vle-list-options-actions` div represents the action bar that will be toggled when the `vle-list-options-toggle`
 *   element is clicked. This bar contains all of the action that can be done on the selected list items, and
 *   can basically be anything.
 * - An `vle-list-selectall` class can be applied to the element that should be used to select/deselect all list
 *   items. This will be enabled automatically by the system. If the list options have any buttons that require the collection
 *   of all selected items, the list options and the list should be wrapped in a `vle-list-container` div.
 * - The primary actions under `vle-list-options-actions` should be disabled by default, as they can only be clicked
 *   when at least one of the items in the corresponding list is checked.
 */

.vle-list-options {
    border-bottom: 1px solid #EEE;
    margin-bottom: 20px;
}

.vle-list-options > div {
    line-height: 30px;
    margin-bottom: 15px;
    clear: both;
}

.vle-list-options .vle-list-options-toggle,
.vle-list-options .btn.vle-list-options-toggle,
.vle-list-options .btn.vle-list-options-toggle:disabled,
.vle-list-options .btn.vle-list-options-toggle:hover,
.vle-list-options .btn.vle-list-options-toggle:active,
.vle-list-options .btn.vle-list-options-toggle:focus {
    background: none;
    border: none;
    filter: none;
    padding: 1px 0;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
}

.vle-list-options .vle-list-options-toggle h2 {
    margin: 0;
    font-size: 20px;
    line-height: 1.2;
}

.vle-list-options .vle-list-options-toggle h2 .badge {
    margin-left: 5px;
    top: -3px;
}

.vle-list-options .vle-list-options-toggle:disabled {
    cursor: auto;
}

.vle-list-options .vle-list-options-toggle:disabled .icon-caret-down,
.vle-list-options .vle-list-options-toggle:disabled .icon-caret-up {
    display: none;
}

.vle-list-options form {
    margin-bottom: 0;
}

/* Actions bar */

.vle-list-options .vle-list-options-actions > input,
.vle-list-options .vle-list-options-actions > button {
    margin-right: 7px;
}

.vle-list-options .vle-list-options-actions .btn i {
    font-size: 18px;
}

.vle-list-options .btn-group .btn i {
    font-size: 12px;
}


/******************
 ** LIST ACTIONS **
 ******************/

/**
 * The list actions are shown to the managers of a list and provide options to add new items to the
 * list or manage the items in the list. List actions are expected to be shown as the first item in
 * a list. In grid view, the list actions will be rendered as a tile that is similar to the other tiles in
 * the list and will contain the action buttons as well as the default thumbnail for the resource type.
 * In details and compact view, the list actions will only display the actions buttons.
 *
 * The following HTML structure should be used to create a list actions element:
 *
 *  <li class="vle-list-actions vle-list-actions-multiple">
 *      <div class="vle-thumbnail vle-thumbnail-large icon-vle-content"></div>
 *      <ul>
 *          <li>
 *              <button type="button" class="btn vle-trigger-upload">
 *                  <i class="icon-cloud-upload pull-left"></i>__MSG__UPLOAD__
 *              </button>
 *          </li>
 *      </ul>
 *   </li>
 *
 * Notes:
 *
 * - The most common way to use a list actions element is to prepend it into an infinite scroll list for managers
 *   of the list. This will then also avoid that the `empty` list message is shown to managers.
 * - When more than 1 action button needs to be shown in the list actions, the optional `vle-list-actions-multiple`
 *   class should be added to the `vle-list-actions` container.
 * - In grid view, icons inside of the action buttons will be hidden from the actions tile because of the limited
 *   available space. In details and compact view, the icons will be shown.
 * - The resource type icon shown in the list actions in grid view can be any of the `icon-vle-<resourceType>`
 *   icons outlines in the `Thumbnails` section.
 */

/* Core list action styles */

.vle-list-actions ul {
    margin: 0px;
}

.vle-list-actions ul > li {
    list-style-type: none;
    margin-top: 10px;
}

/* Grid view */

ul.vle-list.vle-list-grid > li.vle-list-actions {
    border-style: solid;
    border-width: 1px;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
}

ul.vle-list.vle-list-grid li.vle-list-actions div.vle-thumbnail {
    background: none;
    border-width: 1px;
    border-style: dashed;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
    height: 150px;
    margin: 5px;
    width: 150px;
}

ul.vle-list.vle-list-grid .vle-list-actions div.vle-thumbnail:before {
    margin-top: -40px;
}

ul.vle-list.vle-list-grid .vle-list-actions.vle-list-actions-multiple div.vle-thumbnail:before {
    margin-top: -60px;
}

ul.vle-list.vle-list-grid .vle-list-actions .btn i {
    display: none;
}

ul.vle-list.vle-list-grid .vle-list-actions ul {
    bottom: 15px;
    left: 0;
    padding: 7px;
    position: absolute;
    right: 0;
    text-align: center;
}

ul.vle-list.vle-list-grid .vle-list-actions.vle-list-actions-multiple ul {
    bottom: 5px;
}

/* Details and compact view */

ul.vle-list:not(.vle-list-grid) .vle-list-actions {
    height: 50px;
}

ul.vle-list:not(.vle-list-grid) .vle-list-actions div.vle-thumbnail {
    display: none;
}

ul.vle-list:not(.vle-list-grid) .vle-list-actions ul > li {
    display: inline;
    margin-right: 10px;
}
